package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.Account;
import ca.jrvs.apps.trading.model.Position;
import ca.jrvs.apps.trading.model.Trader;
import ca.jrvs.apps.trading.model.TraderAccountView;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class TraderAccountService {

    private static final Logger logger = LoggerFactory.getLogger(TraderAccountService.class);

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
                                PositionDao positionDao, SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount
     *  - validate a user input (all fields must be non-empty)
     *  - create a trader
     *  - create an account
     *  - create, setup and return a new traderAccountView
     *
     * Assumption: To simplify the logic, each trader has only one account where traderId = accountId
     *
     * @param trader cannot be null. All fields cannot be null except for Id (Auto-generated by the db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not null
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        Account account = new Account();
        account.setID(trader.getId());
        account.setTraderId(trader.getId());
        account.setAmount(0d);

        traderDao.save(trader);
        accountDao.save(account);

        TraderAccountView traderAccountView = new TraderAccountView();
        traderAccountView.setTrader(trader);
        traderAccountView.setAccount(account);

        return traderAccountView;
    }

    /**
     * A Trader can be deleted iff it has no open position and 0 cash balance. - validate traderId -
     * get trader account by traderId and check account balance - get positions by accountId and check
     * positions - delete all securityOrders, accounts, trader (in this order)
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is not found or null or unable to delete
     */
    public void deleteTraderById(Integer traderId) {

        if (traderId <= 0 || traderId == null) {
            throw new IllegalArgumentException("Invalid Trader ID");
        }
        Trader trader = traderDao.findById(traderId).get();
        Account account = accountDao.findById(traderId).get();

        if (account.getAmount() > 0D) {
            throw new IllegalArgumentException("Account balance is not zero!");
        }

        List<Position> positions = positionDao.findById(account.getId());
        positions.forEach(pos -> {
            if (pos.getPosition() > 0) {
                throw new IllegalArgumentException("Position is not zero!");
            }});

        securityOrderDao.deleteById(account.getId());
        accountDao.deleteById(account.getId());
        traderDao.deleteById(trader.getId());
    }

    /**
     * Deposit a fund to an account by traderId
     * - validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateOne
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {

        if (traderId <= 0 || traderId == null) {
            throw new IllegalArgumentException("Invalid Trader ID");
        } else if (fund <= 0D) {
            throw new IllegalArgumentException("Deposit amount cannot be less than or equal to 0");
        }

        Account account = accountDao.findById(traderId).get();

        account.setAmount(account.getAmount() + fund);
        accountDao.updateOne(account);

        return account;
    }

    /**
     * Withdraw a fund to an account by traderId
     * - validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateAmountById
     *
     * @param traderId trader ID
     * @param fund amount can't be 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, fund is less or equal to 0,
     * and insufficient funds
     */
    public Account withdraw(Integer traderId, Double fund) {

        if (traderId <= 0 || traderId == null) {
            throw new IllegalArgumentException("Invalid Trader ID");
        } else if (fund <= 0D) {
            throw new IllegalArgumentException("Withdrawal amount cannot be less than or equal to 0");
        }

        Account account = accountDao.findById(traderId).get();

        Double updateAmount = account.getAmount() - fund;
        if (updateAmount < 0D) {
            throw new IllegalArgumentException("Insufficient funds for withdrawl");
        }

        account.setAmount(updateAmount);
        accountDao.updateOne(account);

        return account;
    }
}
